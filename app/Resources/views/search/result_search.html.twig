{% extends '::base.html.twig' %}

{% block breadcrumbs %}
    <a href="#" class="btn btn-bc">Rechercher</a>
{% endblock %}

{% block body %}
    <h1>RÃ©sultats de recherche <small>{{ search }}</small></h1>
    <div class="col-xs-12 col-sm-10 col-sm-offset-1 col-md-offset-2 col-md-8">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title text-center big">Series</h3>
            </div>
            <div class="panel-body text-center">
                <div class="row">
                    {% for serie in series %}
                        <a href="{{ path('serie_show',{'serieId':serie.id}) }}">
                            <div class="col-xs-6 col-sm-3 col-md-3 col-lg-2">
                                <figure class="thumbnail">
                                    <img src="{{ serie.picture[0].url }}" class="img-responsive"/>
                                    <figcaption>{{ serie.name }}</figcaption>
                                </figure>
                            </div>
                        </a>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-sm-10 col-sm-offset-1 col-md-offset-2 col-md-8">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title text-center big">Episodes</h3>
            </div>
            <div class="panel-body text-center">
                {% for episode in episodes %}
                    <a href="{{ path('episode_show',{'id':episode.id}) }}">
                        <div class="col-xs-12 col-sm-6">
                            <div class="hidden-xs col-sm-3">
                                    <img src="{{ episode.serie.picture[0].url }}" class="img-responsive"/>
                            </div>
                            <div class="col-xs-12 col-sm-9">
                                <p class="big">{{ episode.serie.name }}</p>
                                <p class="text-left">
                                    <strong>Saison :</strong> {{ episode.saison }}
                                    <span class="text-right"> <strong>Episode :</strong> {{ episode.episodeNumber }} </span>
                                     </br>
                                    <strong>Episode :</strong> {{ episode.name }} </br>
                                </p>
                            </div>

                        </div>
                    </a>
                {% endfor %}
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-sm-10 col-sm-offset-1 col-md-offset-2 col-md-8">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title text-center big">Users</h3>
            </div>
            <div class="panel-body text-center">
                <div class="row">
                    {% for user in users %}
                        <a href="{{ path('user_profile',{'user':user.id}) }}">
                            <div class="col-xs-6 col-sm-3 col-md-3 col-lg-2">
                                <figure class="thumbnail">
                                    <img src="{{ user.avatar }}" class="img-responsive"/>
                                    <figcaption>{{ user.username }}</figcaption>
                                </figure>
                            </div>
                        </a>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        var myHilitor; // global variable
        document.addEventListener("DOMContentLoaded", function() {
            myHilitor = new Hilitor("search_result");
            myHilitor.apply("{{ search }}");
        }, false);


        function Hilitor(id, tag)
        {

            var targetNode = document.getElementById(id) || document.body;
            var hiliteTag = tag || "EM";
            var skipTags = new RegExp("^(?:" + hiliteTag + "|SCRIPT|FORM|SPAN)$");
            var colors = ["#5bc0de", "#a0ffff", "#9f9", "#f99", "#f6f"];
            var wordColor = [];
            var colorIdx = 0;
            var matchRegex = "";
            var openLeft = false;
            var openRight = false;

            this.setMatchType = function(type)
            {
                switch(type)
                {
                    case "left":
                        this.openLeft = false;
                        this.openRight = true;
                        break;
                    case "right":
                        this.openLeft = true;
                        this.openRight = false;
                        break;
                    case "open":
                        this.openLeft = this.openRight = true;
                        break;
                    default:
                        this.openLeft = this.openRight = false;
                }
            };

            this.setRegex = function(input)
            {
                input = input.replace(/^[^\w]+|[^\w]+$/g, "").replace(/[^\w'-]+/g, "|");
                input = input.replace(/^\||\|$/g, "");
                if(input) {
                    var re = "(" + input + ")";
                    if(!this.openLeft) re = "\\b" + re;
                    if(!this.openRight) re = re + "\\b";
                    matchRegex = new RegExp(re, "i");
                    return true;
                }
                return false;
            };

            this.getRegex = function()
            {
                var retval = matchRegex.toString();
                retval = retval.replace(/(^\/(\\b)?|\(|\)|(\\b)?\/i$)/g, "");
                retval = retval.replace(/\|/g, " ");
                return retval;
            };

            // recursively apply word highlighting
            this.hiliteWords = function(node)
            {
                if(node === undefined || !node) return;
                if(!matchRegex) return;
                if(skipTags.test(node.nodeName)) return;

                if(node.hasChildNodes()) {
                    for(var i=0; i < node.childNodes.length; i++)
                        this.hiliteWords(node.childNodes[i]);
                }
                if(node.nodeType == 3) { // NODE_TEXT
                    if((nv = node.nodeValue) && (regs = matchRegex.exec(nv))) {
                        if(!wordColor[regs[0].toLowerCase()]) {
                            wordColor[regs[0].toLowerCase()] = colors[colorIdx++ % colors.length];
                        }

                        var match = document.createElement(hiliteTag);
                        match.appendChild(document.createTextNode(regs[0]));
                        match.style.backgroundColor = wordColor[regs[0].toLowerCase()];
                        match.style.fontStyle = "inherit";
                        match.style.color = "#000";

                        var after = node.splitText(regs.index);
                        after.nodeValue = after.nodeValue.substring(regs[0].length);
                        node.parentNode.insertBefore(match, after);
                    }
                };
            };

            // remove highlighting
            this.remove = function()
            {
                var arr = document.getElementsByTagName(hiliteTag);
                while(arr.length && (el = arr[0])) {
                    var parent = el.parentNode;
                    parent.replaceChild(el.firstChild, el);
                    parent.normalize();
                }
            };

            // start highlighting at target node
            this.apply = function(input)
            {
                this.remove();
                if(input === undefined || !input) return;
                if(this.setRegex(input)) {
                    this.hiliteWords(targetNode);
                }
            };

        }
    </script>
{% endblock %}